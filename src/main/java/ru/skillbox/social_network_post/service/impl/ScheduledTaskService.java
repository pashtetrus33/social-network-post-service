package ru.skillbox.social_network_post.service.impl;

import feign.FeignException;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.retry.annotation.Backoff;
import org.springframework.retry.annotation.Retryable;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import ru.skillbox.social_network_post.aspect.LogExecutionTime;
import ru.skillbox.social_network_post.client.AccountServiceClient;
import ru.skillbox.social_network_post.client.AuthServiceClient;
import ru.skillbox.social_network_post.dto.*;
import ru.skillbox.social_network_post.exception.CustomFreignException;
import ru.skillbox.social_network_post.security.HeaderAuthenticationToken;
import ru.skillbox.social_network_post.security.SecurityUtils;
import ru.skillbox.social_network_post.service.CommentService;
import ru.skillbox.social_network_post.service.PostService;

import java.time.Duration;
import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.atomic.AtomicInteger;

@Slf4j
@Service
@RequiredArgsConstructor
public class ScheduledTaskService {

    @Value("${authentication.login}")
    private String login;

    @Value("${authentication.password}")
    private String password;

    @Value("${publish-date.after}")
    private String publishDateAfterNow;

    @Value("${publish-date.before}")
    private String publishDateBeforeNow;

    private final AuthServiceClient authServiceClient;
    private final AccountServiceClient accountServiceClient;
    private final PostService postService;
    private final CommentService commentService;
    private final RandomQuoteGenerator randomQuoteGenerator;

    private static final AtomicInteger counter = new AtomicInteger(1);

    @Scheduled(fixedRate = 1_800_000) // 30 –º–∏–Ω = 1 800 000 –º—Å
    public void executeTask() {
        log.warn("Scheduled task.... {}", System.currentTimeMillis());

        boolean isTokenValid = tokenValidation(SecurityUtils.getToken());

        if (!isTokenValid) {
            log.warn("Scheduled task. Token validation failed!!! Trying to login....");

            String token = authenticateUser(login, password);

            if (token != null) {
                log.info("Scheduled task. Login successful");
                SecurityUtils.saveToken(token);
            } else {
                log.warn("Scheduled task. Token null");
            }
        }

        List<UUID> accountIds = getAccountIds();
        log.warn("Scheduled task. Fetch all account ids: {}", accountIds);

        List<UUID> mutableList = new ArrayList<>(accountIds);
        Collections.shuffle(mutableList);

        mutableList.forEach(accountId -> {
            try {

                String userName = "Scheduled_user";

                Authentication authentication = new HeaderAuthenticationToken(accountId, userName,
                        Collections.singletonList(new SimpleGrantedAuthority("Scheduled_User")));
                SecurityContextHolder.getContext().setAuthentication(authentication);
                log.warn("Successfully authenticated user: {}", accountId);

                // –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 1-2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —Ü–∏—Ç–∞—Ç
                Thread.sleep(1500 + ThreadLocalRandom.current().nextLong(1000));
                log.warn("–ì–æ—Ä–æ–¥ –∑–∞—Å—ã–ø–∞–µ—Ç.... –ü—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è –º–∞—Ñ–∏—è ‡≤†_‡≤†");
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }

            List<String> quoteResult = randomQuoteGenerator.getRandomQuote();

            List<TagDto> tags = new ArrayList<>();
            tags.add(new TagDto("—Ü–∏—Ç–∞—Ç–∞"));

            if (!StringUtils.isBlank(quoteResult.get(0))) {
                tags.add(new TagDto(quoteResult.get(0)));
            }

            postService.create(PostDto.builder()
                    .title("–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è #" + counter.getAndIncrement())
                    .postText("\"" + quoteResult.get(1) + "\" ‚Äî " + quoteResult.get(0))
                    .tags(tags)
                    .publishDate(createRandomPublishDate())
                    .authorId(accountId)
                    .build());

            PagePostDto postsForComments = postService.getAll(new PostSearchDto(), PageRequest.of(0, 20, Sort.by(Sort.Order.desc("publishDate"))));

            if (postsForComments != null) {
                log.warn("Got some posts for comments:");
                postsForComments.getContent().forEach(post -> log.warn("Post: {}", post.getId()));

                List<PostDto> postDtos = new ArrayList<>(postsForComments.getContent());
                Collections.shuffle(postDtos);
                postDtos.stream().limit(5).forEach(post -> {

                    LocalDateTime publishDate = post.getPublishDate();

                    long randomMinutes = ThreadLocalRandom.current().nextLong(10, 120);

                    LocalDateTime commentTime = publishDate.plusMinutes(randomMinutes);

                    log.info("–°–ª—É—á–∞–π–Ω–∞—è –¥–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {}", commentTime);

                    String randomComment = comments.get(ThreadLocalRandom.current().nextInt(comments.size()));

                    String postCut = " " + post.getPostText().substring(0, 30) + " ...";

                    CommentDto commentDto = CommentDto.builder()
                            .commentText(randomComment + postCut)
                            .time(commentTime)
                            .build();

                    commentService.create(post.getId(), commentDto);
                    log.warn("–î–æ–±–∞–≤–∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É {}. {}", post.getId(), commentDto.getCommentText());
                });

            } else {
                log.warn("Got no posts for comments");
            }
        });
    }


    private LocalDateTime createRandomPublishDate() {

        LocalDateTime now = LocalDateTime.now();

        try {

            long before = Long.parseLong(publishDateBeforeNow);
            long after = Long.parseLong(publishDateAfterNow);

            if (before < 0 || after < 0) {
                throw new IllegalArgumentException("publish-date.before –∏ publish-date.after –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏");
            }

            LocalDateTime startDate = now.minusDays(before);
            LocalDateTime endDate = now.plusDays(after);

            Duration duration = Duration.between(startDate, endDate);
            long secondsBetween = duration.getSeconds();

            long randomSeconds = ThreadLocalRandom.current().nextLong(secondsBetween);

            LocalDateTime randomDate = startDate.plusSeconds(randomSeconds);
            log.warn("–°–ª—É—á–∞–π–Ω–∞—è –¥–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {}", randomDate);


            return randomDate;
        } catch (NumberFormatException e) {
            throw new IllegalArgumentException("–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è publish-date.before –∏–ª–∏ publish-date.after –≤ —á–∏—Å–ª–æ", e);
        }
    }

    boolean tokenValidation(String token) {

        boolean isTokenValid;

        try {
            isTokenValid = authServiceClient.validateToken(token);
            log.info("Scheduled task. Token valid: {}", isTokenValid);
            return isTokenValid;
        } catch (FeignException e) {
            log.warn("Scheduled task. FreignException trying to validate token");
        } catch (Exception e) {
            log.warn("Scheduled task. Unknown error while trying to validate token: {}", e.getMessage());
        }
        return false;
    }

    String authenticateUser(String login, String password) {

        String accessToken;

        try {
            AuthenticateRq authenticateRq = new AuthenticateRq();
            authenticateRq.setEmail(login);
            authenticateRq.setPassword(password);

            log.warn("Scheduled task. AuthenticateRq: {}", authenticateRq);

            accessToken = authServiceClient.login(authenticateRq).getAccessToken();

        } catch (FeignException e) {
            log.error("Scheduled task. Freign exception while login with credentials: {} {}", login, password);
            return null;
        }

        return accessToken;
    }


    @LogExecutionTime
    @Retryable(backoff = @Backoff(delay = 2000))
    public List<UUID> getAccountIds() {
        try {
            return accountServiceClient.getAllAccounts().getContent().stream().map(AccountDto::getId).toList();
        } catch (FeignException e) {
            throw new CustomFreignException("Scheduled task. Error fetching all accounts");
        }
    }

    List<String> comments = List.of(
            "–û—Ç–ª–∏—á–Ω—ã–π –ø–æ—Å—Ç! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º—ã—Å–ª–∏. –≠—Ç–æ –≤–µ—Ä–Ω–æ: üòäüî•",
            "–û—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –Ω–µ –¥—É–º–∞–ª –æ–± —ç—Ç–æ–º —Ä–∞–Ω—å—à–µ! –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: ü§î‚úÖ",
            "–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω, –æ—Ç–ª–∏—á–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ. –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç–∞–∫: üëçüëè",
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–æ—á–∫–∞ –∑—Ä–µ–Ω–∏—è! –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é: ü§©üí°",
            "–ù–µ —É–≤–µ—Ä–µ–Ω, –Ω–æ –∑–≤—É—á–∏—Ç –ª–æ–≥–∏—á–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ —Ç–∞–∫: ü§∑Ô∏èü§ì",
            "–ö—Ä—É—Ç–æ, —Å–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –î–æ–∫–∞–∑–∞–Ω–æ, —á—Ç–æ: üéØüìö",
            "–ú–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ? –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è. –Ø —á–∏—Ç–∞–ª, —á—Ç–æ: üìñüîç",
            "–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω, –Ω–æ —É–≤–∞–∂–∞—é –≤–∞—à—É —Ç–æ—á–∫—É –∑—Ä–µ–Ω–∏—è. –ï—Å—Ç—å –º–Ω–µ–Ω–∏–µ, —á—Ç–æ: ü§®ü§ù",
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç–∞–∫? –ú–Ω–æ–≥–∏–µ –≥–æ–≤–æ—Ä—è—Ç, —á—Ç–æ: üßêü§î",
            "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –º–Ω–µ —Å—Ç–∞–ª–æ –ø–æ–Ω—è—Ç–Ω–µ–µ. –ï—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —á—Ç–æ: ‚úÖüìú",
            "–í—ã –º–æ–ª–æ–¥–µ—Ü! –û—á–µ–Ω—å —á–µ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ: üéìüìä",
            "–£—Ö —Ç—ã! –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–¥—É–º—ã–≤–∞–ª—Å—è –æ–± —ç—Ç–æ–º. –í –Ω–∞—É—á–Ω—ã—Ö –∫—Ä—É–≥–∞—Ö –≥–æ–≤–æ—Ä—è—Ç, —á—Ç–æ: ü§Øüî¨",
            "–≠—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ –º–æ–π –≤–∑–≥–ª—è–¥ –Ω–∞ –≤–µ—â–∏. –í–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ: üåçüîÑ",
            "–ö–∞–∫ —Ä–∞–∑ –∏—Å–∫–∞–ª —Ç–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –±–ª–∞–≥–æ–¥–∞—Ä—é! –î–æ–∫–∞–∑–∞–Ω–æ —É—á–µ–Ω—ã–º–∏, —á—Ç–æ: üèÜüìë",
            "–ö–∞–∂–µ—Ç—Å—è, –∑–¥–µ—Å—å –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—â—ë —Ä–∞–∑! –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—á–∏—Ç–∞—é—Ç, —á—Ç–æ: ‚ùåü§∑",
            "–ù–∞–¥–æ –±—É–¥–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å, —Å–ø–∞—Å–∏–±–æ! –í —Ç–µ–æ—Ä–∏–∏ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ: üõ†Ô∏è‚öôÔ∏è",
            "–û—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω–æ! –ù–∞–¥–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ–±–µ. –õ—é–±–æ–ø—ã—Ç–Ω–æ, —á—Ç–æ: üìåüí°",
            "–í–∞—É, –¥–∞–∂–µ –Ω–µ –∑–Ω–∞–ª, —á—Ç–æ —Ç–∞–∫ –º–æ–∂–Ω–æ! –ü—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ: üò≤‚ö°",
            "–ú–æ–∂–µ—Ç–µ –æ–±—ä—è—Å–Ω–∏—Ç—å —ç—Ç–æ –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ? –í–∞–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ: üëÄ‚ùì",
            "–°—É–ø–µ—Ä, —Ç–µ–ø–µ—Ä—å –ø–æ–Ω—è—Ç–Ω–æ! –ë–ª–∞–≥–æ–¥–∞—Ä—é! –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≥–æ–≤–æ—Ä—è—Ç, —á—Ç–æ: üôåüìö"
    );
}